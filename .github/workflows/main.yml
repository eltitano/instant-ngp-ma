name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:

  #  build_linux:
  #    name: Build on linux systems
  #    runs-on: ${{ matrix.os }}
  #    strategy:
  #      matrix:
  #        include:
  #          - os: ubuntu-22.04
  #            cuda: "11.7"
  #            arch: 86
  #            python: "3.11"
  #            recommended_gpus: "RTX-3000-and-4000"
  #    env:
  #      build_dir: "build"
  #      config: "Release"
  #      TCNN_CUDA_ARCHITECTURES: ${{ matrix.arch }}
  #    steps:
  #      - name: Install dependencies
  #        run: sudo apt-get update && sudo apt-get install build-essential python3-dev libglfw3-dev libglew-dev libxinerama-dev libxcursor-dev libxi-dev
  #      - uses: actions/checkout@v3
  #        with:
  #          submodules: recursive
  #      - uses: actions/setup-python@v4
  #        with:
  #          python-version: ${{ matrix.python }}
  #      - run: pip install -r requirements.txt
  #      - name: Install CUDA
  #        env:
  #          cuda: ${{ matrix.cuda }}
  #        run: ./dependencies/cuda-cmake-github-actions/scripts/actions/install_cuda_ubuntu.sh
  #        shell: bash
  #      - name: Install Vulkan SDK
  #        uses: humbletim/setup-vulkan-sdk@v1.2.0
  #        with:
  #          vulkan-query-version: latest
  #          vulkan-components: Vulkan-Headers, Vulkan-Loader
  #      - name: CMake
  #        run: cmake . -B ${{ env.build_dir }} ${{ matrix.cmake_flags }} -DCMAKE_BUILD_TYPE=${{ env.config }}
  #      - name: Build
  #        working-directory: ${{ env.build_dir }}
  #        run: cmake --build . --target all --verbose -j `nproc`
  #      - name: Upload release
  #        if: ${{ matrix.recommended_gpus }}
  #        uses: actions/upload-artifact@v3
  #        with:
  #          name: Instant-NGP-for-${{ matrix.recommended_gpus }}
  #          path: |
  #            LICENSE.txt
  #            README.md
  #            requirements.txt
  #            cudart64*.dll
  #            instant-ngp.exe
  #            nvngx_dlss.dll
  #            configs/
  #            docs/nerf_dataset_tips.md
  #            docs/assets_readme/
  #            data/
  #            build/
  #            scripts/flip/*
  #            scripts/category2id.json
  #            scripts/colmap2nerf.py
  #            scripts/common.py
  #            scripts/convert_image.py
  #            scripts/download_colmap.bat
  #            scripts/download_ffmpeg.bat
  #            scripts/mask_images.py
  #            scripts/nerfcapture2nerf.py
  #            scripts/nsvf2nerf.py
  #            scripts/record3d2nerf.py
  #

  build_and_push_docker:
    name: Build Docker Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build_windows:
    name: Build on Windows
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            visual_studio: "Visual Studio 16 2019"
            cuda: "11.5.1"
            arch: 86
            python: "3.11"
            recommended_gpus: "RTX-3000-and-4000"
    env:
      build_dir: "build"
      config: "RelWithDebInfo"
      TCNN_CUDA_ARCHITECTURES: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - run: pip install -r requirements.txt
      - name: Install CUDA
        env:
          cuda: ${{ matrix.cuda }}
          visual_studio: ${{ matrix.visual_studio }}
        shell: powershell
        run: .\dependencies\cuda-cmake-github-actions\scripts\actions\install_cuda_windows.ps1
      - name: Install Vulkan SDK
        uses: humbletim/install-vulkan-sdk@v1.1.1
      - name: CMake
        run: cmake . -B ${{ env.build_dir }} ${{ matrix.cmake_flags }} -G "${{ matrix.visual_studio }}" -A x64
      - name: Build
        working-directory: ${{ env.build_dir }}
        run: cmake --build . --config ${{ env.config }} --target ALL_BUILD --verbose
      - name: Rename scripts folder
        run: mv ./scripts ./instant_ngp
      - name: Move build folder
        run: mv ./build ./instant_ngp/build
      - name: Upload release
        if: ${{ matrix.recommended_gpus }}
        uses: actions/upload-artifact@v3
        with:
          name: Instant-NGP-Windows-${{ matrix.recommended_gpus }}
          path: |
            LICENSE.txt
            README.md
            requirements.txt
            cudart64*.dll
            instant-ngp.exe
            nvngx_dlss.dll
            setup.py
            configs/
            docs/nerf_dataset_tips.md
            docs/assets_readme/
            data/
            instant_ngp/build
            instant_ngp/flip/*
            instant_ngp/category2id.json
            instant_ngp/colmap2nerf.py
            instant_ngp/common.py
            instant_ngp/convert_image.py
            instant_ngp/download_colmap.bat
            instant_ngp/download_ffmpeg.bat
            instant_ngp/mask_images.py
            instant_ngp/nerfcapture2nerf.py
            instant_ngp/nsvf2nerf.py
            instant_ngp/record3d2nerf.py
            instant_ngp/run.py
            instant_ngp/scenes.py
            instant_ngp/__init__.py

  continuous_release:
    name: "Update continuous development release"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [ build_windows ]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Grab binary artifacts
        uses: actions/download-artifact@v3
      - name: Package
        run: for i in */; do zip -r "${i%/}.zip" "$i"; done
      - name: Update release
        uses: eine/tip@master
        with:
          files: "*.zip"
          rm: true
          tag: "continuous"
          token: ${{ secrets.GITHUB_TOKEN }}
